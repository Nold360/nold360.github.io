"use strict";(self.webpackChunknoldwiki=self.webpackChunknoldwiki||[]).push([[289],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,k=d["".concat(i,".").concat(h)]||d[h]||p[h]||l;return n?a.createElement(k,s(s({ref:t},c),{},{components:n})):a.createElement(k,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<l;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1223:function(e,t,n){n.r(t),n.d(t,{default:function(){return p},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),s=["components"],o={},i={unversionedId:"Kubernetes/vault",id:"Kubernetes/vault",isDocsHomePage:!1,title:"Vault",description:"This are some quick notes I took on how to setup a simple Vault for usage with heqet. For a more detailed documentation on how to configure Vault, check out the Official Vault Docs.",source:"@site/docs/Kubernetes/vault.md",sourceDirName:"Kubernetes",slug:"/Kubernetes/vault",permalink:"/Kubernetes/vault",editUrl:"https://github.com/nold360/wiki/edit/master/docs/Kubernetes/vault.md",version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Home-Assistant, Homematic, Homegear & CUL on K8s",permalink:"/Kubernetes/cul-homegear"},next:{title:"My Cyberdeck Build",permalink:"/Cyberdeck"}},u=[{value:"Init Vault using GPG",id:"init-vault-using-gpg",children:[{value:"Copy GPG Public Key",id:"copy-gpg-public-key",children:[]},{value:"Init Vault",id:"init-vault",children:[]},{value:"Save Unseal Key somewhere sage e.g. Keepass",id:"save-unseal-key-somewhere-sage-eg-keepass",children:[]},{value:"Decode Unseal Key",id:"decode-unseal-key",children:[]},{value:"Unseal Vault",id:"unseal-vault",children:[]}]},{value:"Enable Kubernetes Auth",id:"enable-kubernetes-auth",children:[]},{value:"Create Secret Store",id:"create-secret-store",children:[]},{value:"Add Secrets-Operator Role &amp; Policy",id:"add-secrets-operator-role--policy",children:[{value:"Create Policy",id:"create-policy",children:[]},{value:"Add Auth Role",id:"add-auth-role",children:[]}]},{value:"Add Secrets",id:"add-secrets",children:[]},{value:"Vault-Issuer Cert-Manager via Kubernetes Service Account",id:"vault-issuer-cert-manager-via-kubernetes-service-account",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This are some quick notes I took on how to setup a simple Vault for usage with heqet. For a more detailed documentation on how to configure Vault, check out the ",(0,l.kt)("a",{parentName:"p",href:"https://www.vaultproject.io/docs"},"Official Vault Docs"),"."),(0,l.kt)("p",null,"Note: Most of this commands can be executed either using the ",(0,l.kt)("inlineCode",{parentName:"p"},"vault")," command on your local device or the inside the vault pod itself."),(0,l.kt)("h2",{id:"init-vault-using-gpg"},"Init Vault using GPG"),(0,l.kt)("h3",{id:"copy-gpg-public-key"},"Copy GPG Public Key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"cat > nold.pub << EOF\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQENBGBXTjkBCAC7qZU1cz7RWYbAb838ypRLJZKLWfVBvry4XYwWPN0Rcj55dPN+\n...\n5of4H66FzNwJxYrunmM5KTeUxZiLPC1JoKMF5uvKoo59TD0IuAPq735QDjWbS4vb\ndMtSqTCinZSd\n=wuZw\n-----END PGP PUBLIC KEY BLOCK-----\nEOF\n")),(0,l.kt)("h3",{id:"init-vault"},"Init Vault"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},'vault operator init -key-shares=1 -key-threshold=1 -pgp-keys="nold.pub"\n')),(0,l.kt)("h3",{id:"save-unseal-key-somewhere-sage-eg-keepass"},"Save Unseal Key somewhere sage e.g. Keepass"),(0,l.kt)("h3",{id:"decode-unseal-key"},"Decode Unseal Key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"$ echo $unseal-key | base64 -d | gpg -dq\n")),(0,l.kt)("h3",{id:"unseal-vault"},"Unseal Vault"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"vault operator unseal\n")),(0,l.kt)("h2",{id:"enable-kubernetes-auth"},"Enable Kubernetes Auth"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},'vault auth enable kubernetes\n\nvault write auth/kubernetes/config \\\n    token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \\\n    kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \\\n    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \\\n    disable_iss_validation=true\n')),(0,l.kt)("h2",{id:"create-secret-store"},"Create Secret Store"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vault secrets enable -path=heqet kv-v2\n")),(0,l.kt)("h2",{id:"add-secrets-operator-role--policy"},"Add Secrets-Operator Role & Policy"),(0,l.kt)("h3",{id:"create-policy"},"Create Policy"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},'vault policy write heqet-app << EOF\npath "heqet/+/*" {\n  capabilities = ["read"]\n}\nEOF\n')),(0,l.kt)("h3",{id:"add-auth-role"},"Add Auth Role"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"vault write auth/kubernetes/role/heqet-app \\\n  bound_service_account_names=vault-secrets-operator \\\n  bound_service_account_namespaces=vault-secrets-operator \\\n  policies=heqet-app \\\n  ttl=6h\n")),(0,l.kt)("h2",{id:"add-secrets"},"Add Secrets"),(0,l.kt)("p",null,"Remember, Secret path: ",(0,l.kt)("inlineCode",{parentName:"p"},"heqet/<APP-NAME>/<SECRET-NAME>")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"vault kv put heqet/argocd/argocd-secret admin.password='$2y$12$FP8OlsVj5pOOqRAhI4XPoev1STaW01uUEZGcNPQtVZmpacebNhj9i' server.secretkey=\"pDYAWK2mHa68GwwVPAsQOsG/SUT8iIo3S3FXYUWf2qM=\"\nvault kv put heqet/loki-stack/loki-stack-grafana admin-user=admin admin-password='grafana'\nvault kv put heqet/pihole/pihole-admin password=pihole\nvault kv put heqet/minio/minio-secret secret-key=secret access-key=access\n")),(0,l.kt)("h2",{id:"vault-issuer-cert-manager-via-kubernetes-service-account"},"Vault-Issuer Cert-Manager via Kubernetes Service Account"),(0,l.kt)("p",null,"We expect you already have setup a PKI & Intermediate PKI. You will need a policy to allow your approle to create new certs:"),(0,l.kt)("p",null,"And a role: ","[dc = my local domain]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"vault write pki_int/roles/dc \\\n    allowed_domains=.dc \\\n    allow_subdomains=true \\\n    max_ttl=72h\n")),(0,l.kt)("p",null,"Policy:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},'vault policy write pki_int - <<EOF\npath "pki_int*" { capabilities = ["read", "list"] }\npath "pki_int/roles/dc"   { capabilities = ["create", "update"] }\npath "pki_int/sign/dc"    { capabilities = ["create", "update"] }\npath "pki_int/issue/dc"   { capabilities = ["create"] }\nEOF\n')),(0,l.kt)("p",null,"Authorize Service Account"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shellsession"},"vault write auth/kubernetes/role/vault-issuer \\\n  bound_service_account_names=vault-issuer \\\n  bound_service_account_namespaces=cert-manager \\\n  policies=pki_int \\\n  ttl=6h\n")))}p.isMDXComponent=!0}}]);